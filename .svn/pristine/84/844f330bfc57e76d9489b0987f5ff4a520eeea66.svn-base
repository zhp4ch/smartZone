package com.mass.biz.smart.merchant.controller;

import com.mass.biz.news.controller.NewsController;
import com.mass.biz.smart.merchant.model.SzMerchant;
import com.mass.biz.smart.merchant.service.SzMerchantService;
import com.mass.core.utils.AjaxResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpSession;
import java.util.List;
import java.util.Map;

import static com.mass.core.utils.AjaxResponse.FAILURE_EDIT_ENTITY;

/**
 * @ClassName 商户入驻
 * @Author 郑上进
 * @Date 2018/7/17 14:59
 * @Version 1.0
 **/
@RestController
@RequestMapping(value = "/szMerchant")
public class SzMerchantController {

    private final static Logger LOGGER = LoggerFactory.getLogger(NewsController.class);

    @Autowired
    private SzMerchantService szMerchantService;

    /*流程管理*/

    /**
     * 根据id查询
     *
     * @Author 郑上进
     * @Date 15:32 2018/7/17
     **/
    @RequestMapping(value = "/getFlowById", method = RequestMethod.GET)
    public AjaxResponse getFlowById(@RequestParam("id") Long id) {
        try {
            SzMerchant szMerchant = this.szMerchantService.getFlowById(id);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("select sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 修改流程
     *
     * @Author 郑上进
     * @Date 15:31 2018/7/17
     **/
    @RequestMapping(value = "/updateFlow", method = RequestMethod.POST)
    public AjaxResponse updateFlow(SzMerchant szMerchant, HttpSession session) {
        return this.szMerchantService.updateFlow(szMerchant) ? AjaxResponse.success("ok", szMerchant)
                : new AjaxResponse(FAILURE_EDIT_ENTITY, "error", szMerchant);
    }

    /*入驻管理*/

    /**
     * 分页查询及列表
     *
     * @Author 郑上进
     * @Date 14:37 2018/7/18
     **/
    @RequestMapping(value = "/selectPageList", method = RequestMethod.GET)
    public AjaxResponse selectPageList(SzMerchant szMerchant,
                                       @RequestParam(value = "page") Integer pageIndex,
                                       @RequestParam(value = "limit") Integer pageSize) {
        try {
            Long count = szMerchantService.count(szMerchant);
            List<SzMerchant> list = szMerchantService.selectPageList(szMerchant, (pageIndex - 1) * pageSize, pageSize);
            return AjaxResponse.success("ok", list, count, pageIndex);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("select sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 根据id查询数据
     *
     * @Author 郑上进
     * @Date 14:45 2018/7/18
     **/
    @RequestMapping(value = "/getEntityById", method = RequestMethod.GET)
    public AjaxResponse getEntityById(@RequestParam("id") Long id) {
        try {
            SzMerchant szMerchant = szMerchantService.getEntityById(id);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("select sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 新增数据(用户申请入口)
     *
     * @Author 郑上进
     * @Date 17:10 2018/7/19
     **/
    @RequestMapping(value = "/addEntity", method = RequestMethod.POST)
    public AjaxResponse addEntity(SzMerchant szMerchant) {
        try {
            this.szMerchantService.addEntity(szMerchant);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("insert sz error!", e);
            return AjaxResponse.error("+error");
        }
    }

    /**
     * 修改数据(审核)
     *
     * @Author 郑上进
     * @Date 11:32 2018/7/19
     **/
    @RequestMapping(value = "/editEntity", method = RequestMethod.POST)
    public AjaxResponse editEntity(SzMerchant szMerchant) {
        try {
            this.szMerchantService.editEntity(szMerchant);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("update sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 删除数据
     *
     * @Author 郑上进
     * @Date 15:54 2018/7/19
     **/
    @RequestMapping(value = "/deleteEntity", method = RequestMethod.GET)
    public AjaxResponse deleteEntity(Long id) {
        try {
            this.szMerchantService.deleteEntity(id);
            return AjaxResponse.success("ok", id);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("delete sz error!", e);
            return AjaxResponse.error("error");
        }
    }


    @RequestMapping(value = "/selectCount", method = RequestMethod.GET)
    public AjaxResponse selectCount() {
        try {
        	 List<Object> map = this.szMerchantService.selectCount();
            return AjaxResponse.success("ok", map);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("delete error!", e);
            return AjaxResponse.error("error");
        }
    }
}
