package com.mass.biz.smart.property.propertyPriceStatistics.controller; 

import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;




import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.mass.biz.smart.merchantMgt.model.SzMerchantMgt;
import com.mass.biz.smart.property.propertyPriceStatistics.model.PropertyPrice;
import com.mass.biz.smart.property.propertyPriceStatistics.service.PropertyPriceService;
import com.mass.biz.smart.property.suggestion.model.Suggest;
import com.mass.biz.smart.user.model.SzUser;
import com.mass.biz.utils.ExcelUtil;
import com.mass.biz.utils.StringUtil;
import com.mass.core.sys.file.service.FileUploadService;
import com.mass.core.sys.user.model.SysUser;
import com.mass.core.utils.AjaxResponse;
import com.mass.core.utils.ExportExcelUtil;

/**
 *
 * 项目名称：smartZone-ht
 * 类名称：PropertyPriceController
 * 类描述：物业统计控制层
 * 创建人：zx
 * 创建时间：2018‎年‎8‎月‎8‎日 10:14:05
 * 
 * @version
 *
 */
@RestController
@RequestMapping("/propertyPrice")
public class PropertyPriceController {

	@Autowired
	private PropertyPriceService propertyPriceService;
	
	@Autowired
	private FileUploadService fileUploadService;
	
	/**
	* @Title: addPropertyPrice 
	* @Description: 物业统计新增 
	* @param @param propertyPrice
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 11:16:09
	 */
	@RequestMapping("/addPropertyPrice")
	public AjaxResponse addPropertyPrice(PropertyPrice propertyPrice){
		try {
			PropertyPrice pp= this.propertyPriceService.addPropertyPrice(propertyPrice);
			return AjaxResponse.success("ok", pp);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error",propertyPrice);
		}
	}
	/**
	* @Title: editPropertyPrice 
	* @Description: 物业统计修改
	* @param @param propertyPrice
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 11:20:23
	 */
	@RequestMapping("/editPropertyPrice")
	public AjaxResponse editPropertyPrice(PropertyPrice propertyPrice){
		try {
			return this.propertyPriceService.editPropertyPrice(propertyPrice)?AjaxResponse.success("ok", propertyPrice):AjaxResponse.error("error", propertyPrice);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error", propertyPrice);
		}
	}
	/**
	* @Title: delPropertyPrice 
	* @Description: 物业统计逻辑删除
	* @param @param id
	* @return AjaxResponse    返回类型
	* @author zx  
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 11:25:11
	 */
	@RequestMapping("/delPropertyPrice")
	public AjaxResponse delPropertyPrice(@RequestParam("id")Long id){
		try {
			return this.propertyPriceService.delPropertyPrice(id)?AjaxResponse.success("ok", id):AjaxResponse.error("error", id);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
	/**
	* @Title: getPropertyPriceById 
	* @Description: 物业统计详情
	* @param @param id
	* @return AjaxResponse    返回类型
	* @author zx  
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 11:30:34
	 */
	@RequestMapping("/getPropertyPriceById")
	public AjaxResponse getPropertyPriceById(@RequestParam("id")Long id){
		try {
			PropertyPrice pp = this.propertyPriceService.getPropertyPriceById(id);
			return AjaxResponse.success("ok ", pp);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
	/**
	* @Title: selectPageList 
	* @Description: 分页查询 
	* @param @param propertyPrice
	* @param @param pageIndex
	* @param @param pageSize
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 11:36:21
	 */
	@RequestMapping("/selectPageList")
	public AjaxResponse selectPageList(PropertyPrice propertyPrice,@RequestParam("page")Integer pageIndex,@RequestParam("limit")Integer pageSize){
		try {
			List<PropertyPrice> list = this.propertyPriceService.selectPageList(propertyPrice, pageIndex-1, pageSize);
			Long count = this.propertyPriceService.count(propertyPrice);
			return AjaxResponse.success("ok", list, count, pageIndex);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
	
	/**
	* @Title: queryUserByCreatTime 
	* @Description: 查询当月未创建账单人员信息
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 11:45:08
	 */
	@RequestMapping("/queryUserByCreatTime")
	public AjaxResponse queryUserByCreatTime(){
		try {
			List<PropertyPrice> list = this.propertyPriceService.queryUserByCreateTime();
			return AjaxResponse.success("ok", list);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
	
	/**
	* @Title: exportPrice 
	* @Description: 导出
	* @param @param suggest
	* @param @param request
	* @param @param response
	* @param @param pageIndex
	* @param @param pageSize    入参
	* @return void    返回类型
	* @author zx   
	* @throws
	* @date ‎2018‎年‎8‎月‎8‎日 ‎18:03:47
	 */
	@RequestMapping("/exportPrice")
	public void exportPrice(PropertyPrice propertyPrice,HttpServletRequest request, HttpServletResponse response,Integer pageIndex,Integer pageSize){
		List<PropertyPrice> list = this.propertyPriceService.selectPageList(propertyPrice, 0, 99999999);
		HSSFWorkbook workbook = new HSSFWorkbook();
		HSSFSheet sheet = workbook.createSheet();
		ExportExcelUtil eeu = new ExportExcelUtil(workbook, sheet);
		String[] strArr = new String[] { "缴费姓名","园区","楼号", "室号", "物业费", "水电费","合计金额",
				"应缴时间","缴费状态","实缴时间","收据编号"};
		int colNum = strArr.length;
		int rowNO = 0;
		eeu.createExcelRow(workbook, sheet, rowNO, -1, colNum, "物业费基本信息表");
		rowNO++;
		
		eeu.createExcelRow(workbook,sheet,rowNO,350,colNum," "+ new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()), 200,"normal", "right");
		rowNO++;
		
		eeu.createColumnHeader(sheet, rowNO, 300, strArr);
		rowNO++;
		
		String[][] strings = new String[list.size()][11];
		for (int i = 0; i < list.size(); i++) {
			PropertyPrice pp = list.get(i);
			strings[i][0] = pp.getName();
			if(pp.getParkNumber().equals("1")){
				strings[i][1] = "创业型企业孵化园区";
			}else if(pp.getParkNumber().equals("2")){
				strings[i][1] = "工业园区";
			}else if(pp.getParkNumber().equals("3")){
				strings[i][1] = "长江市场园区";
			}else if(pp.getParkNumber().equals("4")){
				strings[i][1] = "科技产业园区";
			}else if(pp.getParkNumber().equals("5")){
				strings[i][1] = "电商大楼及物流园区";
			}
			strings[i][2] = pp.getBuilding();
			strings[i][3] = pp.getRoomNumber();					
			strings[i][4] = pp.getPropertyCharge();	
			strings[i][5] = pp.getHydropowerCharge();
			strings[i][6] = pp.getTotal();
			strings[i][7] = pp.getShouldPayDate();
			if (pp.getPayState()==1) {
				strings[i][8] = "未缴费";
			}else if (pp.getPayState()==2) {
				strings[i][8] = "已缴费";
			}
			strings[i][9] = pp.getPayDate();
			strings[i][10] = pp.getPayDate();
		}
		// sheet (创建sheet) rowNo 报表的单行行号(创建第几行) columnData 报表行中显示的数据
		// maxValue Excel显示的最大上限
		sheet = eeu.createColumnData(sheet, rowNO, strings, 65534);

		// 创建通用的Excel最后一行的信息 (创建合计行 (最后一行)) workbook 如果为空 则没有样式 colNum
		// 报表的总列数 (合并) fontCaption 报表行中显示的字符
		// fontSize 字体的大小 (字体大小 默认 200) fontWeight 报表表头显示的字符 align 字体水平位置
		// (center中间 right右 left左) colNum 报表的列数 (需要合并到的列索引)
		eeu.createSummaryRow(workbook, sheet, colNum, "总条数："
				+ strings.length, 200, "物业费基本信息表", "right");
		// 导出路径
		String fileName = "物业费基本信息表.xls";
		//下载
		this.downExcel(fileName, workbook, response);
	}
	
	/**
	 * 
	* @Title: downExcel 
	* @Description: 下载到浏览器 
	* @param @param fileName
	* @param @param wb
	* @param @param response    入参
	* @return void    返回类型
	* @author zx  
	* @throws
	* @date 2018‎年‎8‎月‎8‎日 18:04:05
	 */
	private void downExcel(String fileName, Workbook wb,HttpServletResponse response) {
		OutputStream out = null;
		try {
			String headStr = new StringBuilder().append("attachment;fileName=")
					.append(URLEncoder.encode(fileName, "UTF-8")).toString();
			response.setContentType("application/vnd.ms-excel;charset=UTF-8");
			response.setHeader("Content-Disposition", headStr);
			out = response.getOutputStream();
			wb.write(out);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	//导入·····································································
	/**
	* @Title: importPrice 
	* @Description: 导入
	* @param @param file
	* @param @param session
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date ‎2018‎年‎8‎月‎9‎日 ‎11:24:08
	 */
	@RequestMapping(value = "/importPrice", method = RequestMethod.POST)
	public AjaxResponse importPrice(@RequestParam("file") MultipartFile file, HttpSession session) {
		try {
			List<Map<String, Object>> list 	= new ArrayList<Map<String, Object>>();
			list 							= ExcelUtil.readXls(file);

			List<PropertyPrice> pList 		= new ArrayList<PropertyPrice>();

			for (Map<String, Object> m : list) {

				PropertyPrice pp 			= new PropertyPrice();

				for (String k : m.keySet()) {
				//缴费姓名	身份证号	园区	楼号	室号	物业费	水电费	合计金额	应缴时间	付款方式
					switch (k) {
						case "缴费姓名":
							pp.setName(m.get(k).toString());
							break;
						case "身份证号":
							if(!StringUtil.isEmpty(m.get(k).toString())){
								PropertyPrice pro = propertyPriceService.getByIdCode(m.get(k).toString());
								pp.setUserId(pro.getUserId());
							}
							break;
						case "园区":
							if(m.get(k).toString().equals("创业型企业孵化园区")){
								pp.setParkNumber("1");
							}else if(m.get(k).toString().equals("工业园区")){
								pp.setParkNumber("2");
							}else if(m.get(k).toString().equals("长江市场园区")){
								pp.setParkNumber("3");
							}else if(m.get(k).toString().equals("科技产业园区")){
								pp.setParkNumber("4");
							}else if(m.get(k).toString().equals("电商大楼及物流园区")){
								pp.setParkNumber("5");
							}
							break;
						case "楼号":
							pp.setBuilding(m.get(k).toString());
							break;
						case "室号":
							pp.setRoomNumber(m.get(k).toString());
							break;
						case "物业费":
							pp.setPropertyCharge(m.get(k).toString());
							break;
						case "水电费":
							pp.setHydropowerCharge(m.get(k).toString());
							break;
						case "合计金额":
							pp.setTotal(m.get(k).toString());
							break;
						case "应缴时间":
							if(!StringUtil.isEmpty(m.get(k).toString())){
								String time = m.get(k).toString();
								String times  = time.substring(0, 4)+"-"+time.substring(4, 6)+"-"+time.substring(6, time.length());
								pp.setShouldPayDate(times);
							}
							break;
						case "付款方式":
							if(!StringUtil.isEmpty(m.get(k).toString())){
								if(m.get(k).toString().equals("线上")){
									pp.setPayManner(1);
								}else{
									pp.setPayManner(2);
								}
							}
							break;
					}

				}
				Long count = propertyPriceService.getCountByUserId(pp);
				if (count != null && count > 0) {
					continue;
				}else if(StringUtil.isEmpty(pp.getName()) 			|| 
						pp.getUserId() == null 			  			||
						StringUtil.isEmpty(pp.getParkNumber()) 		||
						StringUtil.isEmpty(pp.getBuilding())		||
						StringUtil.isEmpty(pp.getRoomNumber())		||
						StringUtil.isEmpty(pp.getPropertyCharge())	||
						StringUtil.isEmpty(pp.getTotal())			||
						StringUtil.isEmpty(pp.getShouldPayDate())   ||
						pp.getPayManner() == null){
					continue;	
				} else {
					pList.add(pp);
				}
			}
			
			if(pList!=null && pList.size()>0){
				for(PropertyPrice pri : pList){
					propertyPriceService.addPropertyPrice(pri);
				}
			}
			
			return AjaxResponse.success("ok","");
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
	/**
	* @Title: queryTotalByMonth 
	* @Description: 本月各户总费用统计
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date 2018‎年‎8‎月‎9日 08:58:24
	 */
	@RequestMapping("/queryTotalByMonth")
	public AjaxResponse queryTotalByMonth(String payDate){
		try {
			List<PropertyPrice> list = this.propertyPriceService.queryTotalByMonth(payDate);
			return AjaxResponse.success("ok", list);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
	
	/**
	* @Title: queryAllTotalByYear 
	* @Description: 按年统计每个月收款总额
	* @return AjaxResponse    返回类型
	* @author zx   
	* @throws
	* @date 2018‎年‎8‎月‎9日 09:16:33
	 */
	@RequestMapping("/queryAllTotalByYear")
	public AjaxResponse queryAllTotalByYear(String payDate){
		try {
			List<PropertyPrice> list = this.propertyPriceService.queryAllTotalByYear(payDate.substring(0, 4));
			return AjaxResponse.success("ok", list);
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResponse.error("error");
		}
	}
}
