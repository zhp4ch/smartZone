package com.mass.biz.smart.user.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.swing.plaf.ListUI;

import org.activiti.editor.language.json.converter.util.CollectionUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Lists;
import com.mass.biz.smart.user.model.SzUser;
import com.mass.biz.smart.user.service.SzUserService;
import com.mass.biz.utils.ExcelUtil;
import com.mass.biz.utils.ExportBeanExcel;
import com.mass.biz.utils.StringUtil;
import com.mass.core.framework.aop.LogAop;
import com.mass.core.sys.file.model.FileInfoTemp;
import com.mass.core.utils.AjaxResponse;
import com.mass.core.utils.ExportExcelUtil;

/**
 * 用户信息Controller
 * 
 * @author jiangd
 */
@RestController
@RequestMapping(value = "/szUser")
public class SzUserController {

	@Autowired
	private SzUserService szUserService;
	private final static Logger LOGGER = LoggerFactory.getLogger(SzUserController.class);
	private List<SzUser> userList = null;

	/**
	 * 用户信息分页查询
	 * 
	 * @param szUser
	 * @param pageIndex
	 * @param pageSize
	 * @return
	 */
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public AjaxResponse list(SzUser szUser, @RequestParam(value = "page") Integer pageIndex,
			@RequestParam(value = "limit") Integer pageSize) {
		Long count = szUserService.count(szUser);
		List<SzUser> list = szUserService.selectPageList(szUser, (pageIndex - 1) * pageSize, pageSize);
		userList= list;
		return AjaxResponse.success("ok", list, count, pageIndex);
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public AjaxResponse delete(Integer rid, Integer delFlag) {
		try {
			return this.szUserService.delete(rid, delFlag) ? AjaxResponse.success("delUser ok")
					: AjaxResponse.error("delUser error");
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("delUser error");
			return AjaxResponse.error("delUser error");
		}
	}

	@RequestMapping(value = "/getEntityById", method = RequestMethod.POST)
	public AjaxResponse getEntityById(@RequestParam(value = "rid") Integer rid) {
		try {
			SzUser szUser = this.szUserService.getEntityById(rid);
			return AjaxResponse.success("ok", szUser);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("select SzUser error!", e);
			return AjaxResponse.error("error");
		}
	}

	@RequestMapping(value = "/getEntityByOpenId", method = RequestMethod.POST)
	public AjaxResponse getEntityByOpenId(@RequestParam(value = "openId") String openId) {
		try {
			SzUser szUser = this.szUserService.getEntityByOpendId(openId);
			return AjaxResponse.success("ok", szUser);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("select SzUser error!", e);
			return AjaxResponse.error("error");
		}
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public AjaxResponse editEntity(SzUser szUser, HttpSession session) {
		return this.szUserService.update(szUser) ? AjaxResponse.success("update ok")
				: AjaxResponse.error("update error");
	}

	@LogAop(menuName = "Excel信息", operationDesc = "批理插入", operationType = "1")
	@RequestMapping(value = "/batchImport", method = RequestMethod.POST)
	@Transactional
	public AjaxResponse batchInsert(@RequestParam("file") MultipartFile file, HttpSession session) {
		try {
			List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
			list = ExcelUtil.readXls(file);

			List<SzUser> userList = new ArrayList<SzUser>();

			for (Map<String, Object> m : list) {

				SzUser szUser = new SzUser();

				for (String k : m.keySet()) {

					switch (k) {
						case "姓名":
							szUser.setName(m.get(k).toString());
							break;
						case "身份证号":
							szUser.setId_code(m.get(k).toString());
							break;
						case "联系电话":
							szUser.setPhone(m.get(k).toString());
							break;
						case "公司编码":
							szUser.setMerchant_code(m.get(k).toString());
							break;
					}

				}
				Long count = szUserService.countByIdCode(szUser);
				if (count != null && count > 0) {
					continue;
				}else if(StringUtil.isEmpty(szUser.getName()) || 
						StringUtil.isEmpty(szUser.getId_code()) ||
						StringUtil.isEmpty(szUser.getPhone()) ||
						StringUtil.isEmpty(szUser.getMerchant_code()) ){
					continue;	
				} else {
					userList.add(szUser);
				}
			}
			
			int count = 0;
			
			if(userList!=null && userList.size()>0)
			 count = szUserService.batchInsert(userList);
			
			return count > 0 ? AjaxResponse.success("ok", count) : new AjaxResponse("BatchImport", "error", "id");
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("BatchImport SzUser error!", e);
			return AjaxResponse.error("error");
		}
	}

	@LogAop(menuName = "身份证照片", operationDesc = "批理插入", operationType = "1")
	@RequestMapping(value = "/idcard/import", method = RequestMethod.GET)
	@Transactional
	public AjaxResponse idCardImport(@RequestParam("jsonStr") String jsonStr, HttpSession session) {
		List<SzUser> list = JSONObject.parseArray(jsonStr, SzUser.class);
		if (CollectionUtils.isNotEmpty(list)) {
			szUserService.updateBatch(list);
		}
		return AjaxResponse.success("import success");
	}

	@RequestMapping(value = "/exportExcel", method = RequestMethod.GET)
	@Transactional
	public void userListInfoImport(SzUser szUser,HttpServletResponse response) {
		List<SzUser> list = this.szUserService.selectListByCondition(szUser);
		String[] listName = new String[]{"名字","身份证","昵称","联系电话","公司名称","注册时间"};
		String[] listId = new String[]{"name","id_code","nickname","phone","corporateName","create_time"};
		ExportBeanExcel<SzUser> exportBeanExcelUtil = new ExportBeanExcel();
	    exportBeanExcelUtil.exportExcel(response,"用户列表","用户列表",Arrays.asList(listName),Arrays.asList(listId),CollectionUtils.isEmpty(userList)?list:userList);
	}
}
