package com.mass.biz.smart.merchant.controller;

import com.mass.biz.news.controller.NewsController;
import com.mass.biz.smart.merchant.model.SzMerchant;
import com.mass.biz.smart.merchant.service.SzMerchantService;
import com.mass.biz.smart.merchantScore.model.SzMerchantScore;
import com.mass.biz.smart.merchantScore.service.SzMerchantScoreService;
import com.mass.biz.smart.user.model.SzUser;
import com.mass.biz.smart.user.service.SzUserService;
import com.mass.core.utils.AjaxResponse;
import com.mass.core.utils.ExportExcelUtil;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.List;

import static com.mass.core.utils.AjaxResponse.FAILURE_EDIT_ENTITY;

/**
 * @ClassName 商户入驻
 * @Author 郑上进
 * @Date 2018/7/17 14:59
 * @Version 1.0
 **/
@RestController
@RequestMapping(value = "/szMerchant")
public class SzMerchantController {

    private final static Logger LOGGER = LoggerFactory.getLogger(NewsController.class);

    @Autowired
    private SzMerchantService szMerchantService;
    @Autowired
    private SzUserService szUserService;
    
    @Autowired
    private SzMerchantScoreService szMerchantScoreService;

    /*流程管理*/

    /**
     * 根据id查询
     *
     * @Author 郑上进
     * @Date 15:32 2018/7/17
     **/
    @RequestMapping(value = "/getFlowById", method = RequestMethod.GET)
    public AjaxResponse getFlowById(@RequestParam("id") Long id) {
        try {
            SzMerchant szMerchant = this.szMerchantService.getFlowById(id);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("select sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 修改流程
     *
     * @Author 郑上进
     * @Date 15:31 2018/7/17
     **/
    @RequestMapping(value = "/updateFlow", method = RequestMethod.POST)
    public AjaxResponse updateFlow(SzMerchant szMerchant, HttpSession session) {
        return this.szMerchantService.updateFlow(szMerchant) ? AjaxResponse.success("ok", szMerchant)
                : new AjaxResponse(FAILURE_EDIT_ENTITY, "error", szMerchant);
    }

    /*入驻管理*/

    /**
     * 分页查询及列表
     *
     * @Author 郑上进
     * @Date 14:37 2018/7/18
     **/
    @RequestMapping(value = "/selectPageList", method = RequestMethod.GET)
    public AjaxResponse selectPageList(SzMerchant szMerchant,
                                       @RequestParam(value = "page") Integer pageIndex,
                                       @RequestParam(value = "limit") Integer pageSize) {
        try {
            Long count = szMerchantService.count(szMerchant);
            List<SzMerchant> list = szMerchantService.selectPageList(szMerchant, (pageIndex - 1) * pageSize, pageSize);
            return AjaxResponse.success("ok", list, count, pageIndex);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("select sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 根据id查询数据
     *
     * @Author 郑上进
     * @Date 14:45 2018/7/18
     **/
    @RequestMapping(value = "/getEntityById", method = RequestMethod.GET)
    public AjaxResponse getEntityById(@RequestParam("id") Long id) {
        try {
            SzMerchant szMerchant = szMerchantService.getEntityById(id);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("select sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 新增数据(用户申请入口)
     *
     * @Author 郑上进
     * @Date 17:10 2018/7/19
     **/
    @RequestMapping(value = "/addEntity", method = RequestMethod.POST)
    public AjaxResponse addEntity(SzMerchant szMerchant) {
        try {
            this.szMerchantService.addEntity(szMerchant);
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("insert sz error!", e);
            return AjaxResponse.error("+error");
        }
    }

    /**
     * 修改数据(审核)
     *
     * @Author 郑上进
     * @Date 11:32 2018/7/19
     **/
    @RequestMapping(value = "/editEntity", method = RequestMethod.POST)
    public AjaxResponse editEntity(SzMerchant szMerchant) {
        try {
            this.szMerchantService.editEntity(szMerchant);
            
            //用户类型
            SzUser szUser = new SzUser();
            szUser.setRid(szMerchant.getUserId());
            szUser.setType(SzUser.TYPE_2);
            szUser.setMerchant_code(szMerchant.getMerchant_code());
            szUserService.update(szUser);
            
            //积分
            SzMerchantScore szMerchantScore = new SzMerchantScore();
            szMerchantScore.setMerchant_id(szMerchant.getId());
            szMerchantScoreService.enterInsert(szMerchantScore);
            
            return AjaxResponse.success("ok", szMerchant);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("update sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 删除数据
     *
     * @Author 郑上进
     * @Date 15:54 2018/7/19
     **/
    @RequestMapping(value = "/deleteEntity", method = RequestMethod.GET)
    public AjaxResponse deleteEntity(Long id) {
        try {
            this.szMerchantService.deleteEntity(id);
            return AjaxResponse.success("ok", id);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("delete sz error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * 商户入驻统计
     * @return
     */
    @RequestMapping(value = "/selectCount", method = RequestMethod.GET)
    public AjaxResponse selectCount() {
        try {
            List<Object> map = this.szMerchantService.selectCount();
            return AjaxResponse.success("ok", map);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("delete error!", e);
            return AjaxResponse.error("error");
        }
    }

    /**
     * Excel导出
     *
     * @Author 郑上进
     * @Date 11:49 2018/8/3
     **/
    @RequestMapping("/exportSuggest")
    public void exportSuggest(SzMerchant szMerchant, HttpServletRequest request, HttpServletResponse response, Integer pageIndex, Integer pageSize) {
        List<SzMerchant> list = this.szMerchantService.selectPageList(szMerchant, 0, 99999999);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet();
        ExportExcelUtil eeu = new ExportExcelUtil(workbook, sheet);
        String[] strArr = new String[]{"" +
                "申请人",
                "公司编码",
                "公司名称",
                "公司简称",
                "法人代表",
                "公司地址",
                "所属园区",
                "公司门牌号",
                "审核人姓名",
                "审核意见",
                "审核通过时间",
                "商户状态",
        };
        int colNum = strArr.length;
        int rowNO = 0;
        eeu.createExcelRow(workbook, sheet, rowNO, -1, colNum, "商户基本信息表");
        rowNO++;

        eeu.createExcelRow(workbook, sheet, rowNO, 350, colNum, " " + new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()), 200, "normal", "right");
        rowNO++;

        eeu.createColumnHeader(sheet, rowNO, 300, strArr);
        rowNO++;

        String[][] strings = new String[list.size()][12];
        String fileName;
        for (int i = 0; i < list.size(); i++) {
            SzMerchant szMerchant1 = list.get(i);
            System.out.println("测试"+szMerchant1.getRepresentativeName());
            strings[i][0] = szMerchant1.getUserName();
            strings[i][1] = szMerchant1.getMerchant_code();
            strings[i][2] = szMerchant1.getCorporateName();
            strings[i][3] = szMerchant1.getAbbreviation();
            strings[i][4] = szMerchant1.getRepresentativeName();
            strings[i][5] = szMerchant1.getCorporateName();
            strings[i][6] = szMerchant1.getPark();
            strings[i][7] = szMerchant1.getDoorNumber();
            strings[i][8] = szMerchant1.getExamineName();
            strings[i][9] = szMerchant1.getExamineContent();
            strings[i][10] = szMerchant1.getExamineOkTime();
            if (szMerchant1.getMerchantState() == 0) {
                strings[i][11] = "禁用";
            } else if (szMerchant1.getMerchantState()== 1) {
                strings[i][11] = "启用";
            }
            // sheet (创建sheet) rowNo 报表的单行行号(创建第几行) columnData 报表行中显示的数据
            // maxValue Excel显示的最大上限
            /*sheet = */eeu.createColumnData(sheet, rowNO, strings, 65534);

            // 创建通用的Excel最后一行的信息 (创建合计行 (最后一行)) workbook 如果为空 则没有样式 colNum
            // 报表的总列数 (合并) fontCaption 报表行中显示的字符
            // fontSize 字体的大小 (字体大小 默认 200) fontWeight 报表表头显示的字符 align 字体水平位置
            // (center中间 right右 left左) colNum 报表的列数 (需要合并到的列索引)
            eeu.createSummaryRow(workbook, sheet, colNum, "总条数："
                    + strings.length, 200, "投诉建议基本信息表", "right");
            // 导出路径
            fileName = "商户基本信息表.xls";
            //下载
            this.downExcel(fileName, workbook, response);
        }
    }

    /**
     * 下载到浏览器哦
     *
     * @Author 郑上进
     * @Date 15:36 2018/8/3
     **/
    private void downExcel(String fileName, Workbook wb, HttpServletResponse response) {
        OutputStream out = null;
        try {
            String headStr = new StringBuilder().append("attachment;fileName=")
                    .append(URLEncoder.encode(fileName, "UTF-8")).toString();
            response.setContentType("application/vnd.ms-excel;charset=UTF-8");
            response.setHeader("Content-Disposition", headStr);
            out = response.getOutputStream();
            wb.write(out);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    @RequestMapping(value = "/selectByCondition", method = RequestMethod.GET)
    public AjaxResponse selectByCondition(SzMerchant szMerchant) {
    	  try {
              List<SzMerchant> list = szMerchantService.selectByCondition(szMerchant);
              return AjaxResponse.success("ok", list);
          } catch (Exception e) {
              e.printStackTrace();
              LOGGER.error("select sz error!", e);
              return AjaxResponse.error("error");
          }
    }
}


